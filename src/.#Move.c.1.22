#include "Board.h"
#include "Piece.h"
#include "Move.h"
#include <stdio.h>
#include <math.h>
#include <assert.h>

/* Checks if the Move is Invalid */
int CheckIfInvalid(PIECE piece, int destination)
        assert(piece);
	int newx = destination /10;
	int newy = destination % 10;
	int x = piece.PosX;
	int y = piece.PosY;
	/* Prevents out of bound moves */
	if(1>destination || 88 < destination){
                return 0;/*invalid*/
        }
	/* Typing a spot that the piece is already standing at is an invalid input */
        if(newx == x && newy == y){
                return 0;
        }
}

int Castling(PIECE king, PIECE rook, BOARD board, int destination){
	assert(king);
	assert(rook);
	/* Prevents out of bound moves */
	if(1 > destination || 88 < destination){
		return 0; /*invalid*/
	}                                                                       
}

int PawnMove(PIECE pawn, BOARD board, int destination){
	int check;
	check = CheckIfInvalid(pawn, destination);	
	if(check == 0){
		return check;
	}
	int x = pawn.PosX;
	int y = pawn.PosY;
        char* NewType;
	int newx = destination / 10;
	int newy = destination % 10;
	int counter;
	counter = newy - y;
	if(y == 1 && newx == x && pawn.color == 0){/*special case where pawn moves two spaces forward*/
		if(newy == 3){
			return 1; /*valid*/
		}
	}
	if(y == 6 && newx == x && pawn.color === 1){/* same but for the bottom pawn*/
		if(newy == 4){
			return 1; /*valid*/
		}
	}
        if(newy == 7){
                printf("Type in the promotion you'd like your pawn to have? (Rook, Bishop, Knight, or Queen");
                scanf("%s", &NewType);
                pawn.Type = NewType;
        }
        if(newy == 0){
                printf("Type in the promotion you'd like your pawn to have? (Rook, Bishop, Knight, or Queen");
                scanf("%s", &NewType);
                pawn.Type = NewType;
        }
	
	if(newx != x && pawn.color == 0){ /*top pawn special cases*/
		if((newx - x) != 1 || (newx - x) != -1){/* if pawn moved more than 1 space to the right or left it's no good */
			return 0; /*invalid*/
		}
		else if(counter == 1 && board.squares[newx][newy].Alive == 1 && board.squares[newx][newy].color != pawn.color){ /*top pawn eating an enemy is okay*/
			return 1; /*valid*/		
		}
		else if(counter == 1 && board.squares[newx][newy].Alive == 0 && board,squares[newx][y].color != pawn.color && board.squares[newx][y].Alive == 1){/*top pawn doing EnPassant*/
                        return 1; /*valid*/
                }

	}
	else if(newx != x && pawn.color == 1){/*bottom pawn special cases*/
		if((newx - x) != 1 || (newx - x) != -1){/* if pawn moved more than 1 space to the right or left it's no good */
                        return 0; /*invalid*/
                }

		else if(counter == -1 && board.squares[newx][newy].Alive == 1 && board.squares[newx][newy].color != pawn.color){ /*bottom pawn eating enemy*/
			return 1; /*valid*/
		}
		else if(counter == -1 && board.squares[newx][newy].Alive == 0 && board.squares[newx][y].color != pawn.color && board.squares[newx][y].Alive == 1){/*bottom pawn doing EnPassant*/
			return 1; /*valid*/
		}
	}
	else if(newx == x && counter == 1 && pawn.color == 0){ /*make sure pawn moves one space forward for the top pawn*/
		return 1; /*valid*/
	}
	else if(newx == x && counter == -1 && pawn.color == 1){/*make sure pawn moves one space forward for the bottom pawn*/
		return 1; /*valid*/
	}
	else{ /*case where if the pawn moved left or right it's invalid because it did not either capture an enemy or do enpassant*/
		return 0; /*invalid*/
	}	
}

int RookMove(PIECE rook, BOARD board, int destination){
	int check;
	check  = CheckIfInvalid(rook, destination);
	if (check == 0){
		return check;
	}
        int x = rook.PosX;
        int y = rook.PosY;

	int newx = destination / 10;
        int newy = destination % 10;
	int counter;
	if(newx != x){   /* if rook changes in x direction */
		counter = newx - x;

		if(newy == y){   /*makes sure rook did not change in y direction*/
			for(int i=1;counter > 1;counter--){   /*loop to check that no pieces are inbetween old spot and new spot*/
				
				if(board.squares[x+i][y].Alive == 1){ /*sees if the square has someone alive*/
					
					return 0; /*invlaid*/
				}
				i++; 
			}
			for(int i=1;counter < -1;counter++){ /*secondary loop in the case that counter is negative bc the newx is to the left rather than the right*/

                                if(board.squares[x-i][y].Alive == 1){ /*loop to check it's alive*/
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
			if(board.squares[newx][y].color == rook.color){ /*The loops don't check the last square because of this special case where if the piece is the opposing color, you can eat them*/
				return 0; /*invalid move*/
			}

			return 1; /*valid move*/
		}
		else{
			return 0; /*invalid move*/
		}
	}

	if(newy != y){  /* same loop as the x, except now it checks if the rook moved in the y direction */
		counter = newy -y;
		if(newx == x){
			for(int i=1;counter>1;counter--){

                                if(board.squares[x][y+i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        for(int i=1;counter<-1;counter++){

                                if(board.squares[x][y-i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
			if(board.squares[x][newy].color == rook.color){
			 	return 0; /*invalid move*/
			}
			
			return 1; /*valid move*/
		}
		else{
			return 0;/*invalid move*/
		}
	}
}

int KnightMove(PIECE knight, BOARD board, int destination){
        int check;
        check  = CheckIfInvalid(knight, destination);
        if (check == 0){
                return check;
        }
        int x = knight.PosX;
        int y = knight.PosY;

	int newx = destination / 10;
        int newy = destination % 10;	 	
	/*Checks if the move is valid. Knight moves a change of 2 squares horixontally and 1 vertically or 2 vertically and 1 horizonaally*/
	int dx = abs(newx - x);
	int dy = abs(newy - y); 
	if( dx > 2 || dx < 1 && dy < 1 || dy > 2){
		return 0; 
	}
	if( dx == dy){
		return 0; 
	}
	if(board.squares[newx][newy].Alive == 1 && knight.color == board.squares[newx][newy].color){
		return 0; 
	}
	if(board.squares[newx][newy].Alive == 1 && board.squares[newx][newy].color != knight.color){
		return 1;/*valid*/
	}		
	else{
		return 1;/*valid*/ 
	}
}

int BishopMove(PIECE bishop, BOARD board, int destination){
        int check;
        check  = CheckIfInvalid(bishop, destination);
        if (check == 0){
                return check;
        }
        int x = bishop.PosX;
        int y = bishop.PosY;
	
	int newx = destination / 10;
        int newy = destination % 10;
        
	int i, j;
	if((abs(newx - x)) == (abs(newy - y))){
		if((newx > x) && (newy < y)){	/* bishop moves upper right */
			for(int i = x + 1; i <= newx; i++){
				for(int j = y - 1; j >= newy; j--){
					if((board.squares[i][j].Alive == 1) && (board.squares[x][y].color == bishop.color)){
						return 0; /*invalid*/
					}
					if((newx == x) && (newy == y)){
						return 1; /* valid */ 
					}
				}
			}		 
		}

		if((newx < x) && (newy < y)){	/* bishop moves upper left */
			for(int i = x - 1; i <= newx; i--){
                        	for(int j = y - 1; j >= newy; j--){
                                	if((board.squares[i][j].Alive == 1) && (board.squares[x][y].color == bishop.color)){
                                        	return 0; /*invalid*/
                                	}
                               		if((newx == x) && (newy == y)){
                                        	return 1; /* valid */
                                	}
         	               }
               		}
		}	

		if((newx > x) && (newy >)){	/* bishop moves bottom right */
			for(int i = x + 1; i <= newx; i++){
                        	for(int j = y - 1; j >= newy; j--){
                                	if((board.squares[i][j].Alive == 1) && (board.squares[x][y].color == bishop.color)){
                                        	return 0; /*invalid*/
                                	}
                                	if((newx == x) && (newy == y)){
                                        	return 1; /* valid */
                                	}
                        	}
                	}
		}

		if((newx < x) && (newy < y)){	/* bishop moves bottom left */
			for(int i = x - 1; i <= newx; i--){
                        	for(int j = y + 1; j >= newy; j++){
                                	if((board.squares[i][j].Alive == 1) && (board.squares[x][y].color == bishop.color)){
                                        	return 0; /*invalid*/
                                	}
                                	if((newx == x) && (newy == y)){
                                        	return 1; /* valid */
                                	}	
                 	       }
                	}
		}		
	}
	else{
		return 0;
	}
}	
	
int QueenMove(PIECE queen, BOARD board, int destination){
	int x;
	x = RookMove(queen, board, destination);
	if(x == 0){
		x = BishopMove(queen, board, destination);
	}
	return x;        
}

void KingMove(PIECE king, PIECE board[][8]) {
        int check;
        check  = CheckIfInvalid(king, destination);
        if (check == 0){
                return check;
        }

        int one_x = -1;
        int one_y = 1;
        int x, y, pos;

        for(int i = 0; i < 8; i++) {
                if(i < 4){
                        if((i%2) == 0) {
                                one_x *= -1;
                                x = king.PosX + one_x;
                                y = king.PosY;
				pos = 10*x + y;
                                if(king.color == board.squares[x][y].color && board.squares[x][y].Alive == 1){
                                pos *= -1;}
                                king.PotentialMoves[i] = pos;
                        }
                        else {
                                one_y *= -1;
                                x = king.PosX;
                                y = king.PosY + one_y;
				pos = 10*x + y;
                                if(king.color == board.squares[x][y].color && board.squares[x][y].Alive == 1){
                                pos *= -1;}
                                king.PotentialMoves[i] = pos;
                        }
                }
		else{
                	if((i%2) == 0) {
                        	one_x *= -1;
                	}
                	else {
                        	one_y *= -1;
                	}
                	x = king.x + one_x;
                	y = king.y + one_y;
			pos = 10*x + y;
                	if(king.color == board.squares[x][y].color && board.squares[x][y].Alive == 1){
                	pos *= -1;}
                	king.PotentialMoves[i] = pos;
		}
        }

	for(int m ; m < 8; n ++) {
        	if(king.PotentialMoves[m] >= 0)
        	for(int x = 0; x < 8; x++) {
                	for(int y = 0; y < 8; y++) {
                        	if(board[x][y].color != king.color && (board[x][y].alive == 0)) {
                                	for(int i = 0; i < 30 ; i++) {

                                        	if(abs(board.squares[x][y].PotentialMoves[i]) == king.PotentialMoves[m] && board.squares[x][y].Value != 1)
                                        	king.PotentialMoves[m] *= -1;

                                      		if(board.squares[x][y].value == 1){
                                                	if(-(board.squares[x][y].PotentialMoves[i]) == king.PotentialMoves[m])
							king.PotentialMoves[m] *= -1;
                                        	}
                                	}
                        	}	
         	       }	
        	}	
	}
}

