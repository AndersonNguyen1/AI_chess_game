#include "Board.h"
#include "Piece.h"
#include "Move.h"

int Castling(PIECE board, MOVE move){
        assert(Piece);
        assert(move);
        int x = Piece.x;
        int y = Piece.y;
        /*Checks whether the King or Rook pieces have moved to prevent illegal castling or castling twice. */
        if(board[move->start->x][move->start->y].counter > 0 || board[move->end->x][move->end->y].counter > 0){
                return -1;
        }
}

int KingMove(BOARD board, PIECE Piece, int destination){
	assert(Piece);
        int x = Piece.PosX;
        int y = Piece.PosY;
        int newx = destination / 10;
        int newy = destination % 10;
        if(newx == x && newy == y){
                return 0;
        }
}
int EnPassant(BOARD board, PIECE Piece, int destination){

}
int Promotion(BOARD board, PIECE Piece, int destination){

}
int PawnMove(BOARD board, PIECE Piece, int destination){
        assert(Piece);
        int x = Piece.PosX;
        int y = Piece.PosY;
        int newx = destination / 10;
        int newy = destination % 10;
        if(newx == x && newy == y){
                return 0;
        }

}
int RookMove(BOARD board, PIECE Piece, int destination){
	assert(Piece);
	if(1>destination || 88 < destination){
		return 0;/*invalid*/
	}
	int x = Piece.PosX;
	int y = Piece.PosY;
	int newx = destination / 10;
	int newy = destination % 10;
	if(newx == x && newy == y){
		return 0; /*a case where piece doesnt move aka invalid*/
	}
	int counter;
	if(newx != x){
		counter = newx - x;

		if(newy == y){
			for(int i=1;counter>0;counter--){
				
				if(board[x+i][y].Alive == 1){
					return 0; /*invlaid*/
				}
				i++; 
			}
			for(int i=1;counter<0;counter++){

                                if(board[x-i][y].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
			return 1; /*valid move*/
		}
		else{
			return 0; /*invalid move*/
		}
	}
	if(newy != y){
		counter = newy -y;
		if(newx == x){
			for(int i=1;counter>0;counter--){

                                if(board[x][y+i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        for(int i=1;counter<0;counter++){

                                if(board[x][y-i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
			return 1; /*valid move*/
		}
		else{
			return 0;/*invalid move*/
		}
	}
}

int KnightMove(BOARD board, PIECE Piece, int destination){
	assert(Piece);
        if(1>destination || 88 < destination){
                return 0;/*invalid*/
        }
	int x = Piece.PosX;
	int y = Piece.PosY;
	int newx = destination / 10;
	int newy = destination % 10;
	if(newx == x && newy == y){
		return 0;
	}	
	
}

int BishopMove(BOARD board, PIECE Piece, int destination){
        assert(Piece);
        int x = Piece.PosX;
        int y = Piece.PosY;
        int newx = destination / 10;
        int newy = destination % 10;
        if(newx == x && newy == y){
                return 0;
        }

int QueenMove(BOARD board, PIECE Piece, int destination){
        assert(Piece);
        int x = Piece.PosX;
        int y = Piece.PosY;
        int newx = destination / 10;
        int newy = destination % 10;
        if(newx == x && newy == y){
                return 0;
        }

int CheckIfInvalid(){
	assert(Piece);
	int x = Piece.PosX;
}

