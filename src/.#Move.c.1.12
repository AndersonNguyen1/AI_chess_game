#include "Board.h"
#include "Piece.h"
#include "Move.h"
#include <math.h>
#include <assert.h>

/* Checks if the Move is Invalid */
int CheckIfInvalid(PIECE piece, int destination)
        assert(piece);
	/* Prevents out of bound moves */
	if(1>destination || 88 < destination){
                return 0;/*invalid*/
        }
        int x = piece.PosX;
	int y = piece.PosY;
	/* Typing a spot that the piece is already standing at is an invalid input */
        if(newx == x && newy == y){
                return 0;
        }
}

int Castling(PIECE king, PIECE rook, PIECE board[][8], int destination){
	assert(king);
	assert(rook);
	/* Prevents out of bound moves */
	if(1 > destination || 88 < destination){
		return 0; /*invalid*/
	}                                                                       
}

int EnPassant(PIECE pawn, PIECE board[][8], int destination){
	CheckIfInvalid(pawn, destination);
}
int Promotion(PIECE pawn, PIECE board[][8], int destination){
	CheckIfInvalid();
}

int PawnMove(PIECE pawn, PIECE board[][8], int destination){
	CheckIfInvalid();	
	if(Piece.PosY == 1){
		if(

	}
	if(Piece.PosY == 7){

	}		
}

int RookMove(PIECE rook, PIECE board[][8], int destination){
	CheckIfInvalid();
	int newx = destination / 10;
        int newy = destination % 10;
	int counter;
	if(newx != x){
		counter = newx - x;

		if(newy == y){
			for(int i=1;counter>0;counter--){
				
				if(board[x+i][y].Alive == 1){
					return 0; /*invlaid*/
				}
				i++; 
			}
			for(int i=1;counter<0;counter++){

                                if(board[x-i][y].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
			return 1; /*valid move*/
		}
		else{
			return 0; /*invalid move*/
		}
	}

	if(newy != y){
		counter = newy -y;
		if(newx == x){
			for(int i=1;counter>0;counter--){

                                if(board[x][y+i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        for(int i=1;counter<0;counter++){

                                if(board[x][y-i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
			return 1; /*valid move*/
		}
		else{
			return 0;/*invalid move*/
		}
	}
}

int KnightMove(PIECE knight, PIECE board[][8], int destination){
	CheckIfInvalid();
	int newx = destination / 10;
        int newy = destination % 10;	 	
	/*Checks if the move is valid. Knight moves a change of 2 squares horixontally and 1 vertically or 2 vertically and 1 horizonaally*/
	int dx = abs(newx - x);
	int dy = abs(newy - y); 
	if( dx > 2 || dx < 1 && dy < 1 || dy > 2){
		return 0; 
	}
	if( dx == dy){
		return 0; 
	}
	if(board[newx][newy].alive == 1 && Piece.color == board[newx][newy].color){
		return 0; 
	}
	if(board[newx][newy].alive == 1 && board[newx][newy].color != Piece.color){
		return 1;/*valid*/
	}		
	else{
		return 1;/*valid*/ 
	}
}

int BishopMove(PIECE bishop, PIECE board[][8], int destination){
	CheckIfInvalid();
	
        int counter;
        if(newx != x){
                counter = newx - x;

                if(newy == y){
                        for(int i=1;counter>0;counter--){

                                if(board[x+i][y].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        for(int i=1;counter<0;counter++){

                                if(board[x-i][y].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        return 1; /*valid move*/
                }
                else{
                        return 0; /*invalid move*/
                }
        }

        if(newy != y){
                counter = newy -y;
                if(newx == x){
                        for(int i=1;counter>0;counter--){

                                if(board[x][y+i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        for(int i=1;counter<0;counter++){

                                if(board[x][y-i].Alive == 1){
                                        return 0; /*invlaid*/
                                }
                                i++;
                        }
                        return 1; /*valid move*/
                }
                else{
                        return 0;/*invalid move*/
                }
        }	 
}

int QueenMove(PIECE queen, PIECE board[][8], int destination){
	RookMove(queen, board, destination);
	BishopMove(queen, board, destination);        
}

void KingMove(PIECE king, PIECE board[][8]) {
	CheckIfInvalid();
	int newx = destination / 10;
        int newy = destination % 10;

        int one_x = -1;
        int one_y = 1;
        int x, y;

        for(int i = 0; i < 8; i++) {
                if(i < 4){
                        if((i%2) == 0) {
                                one_x *= -1;
                                x = king.PosX + one_x;
                                y = king.PosY;
                                if(king.color == board[x][y].color)
                                king.PotentialMoves[i] = -1;
                                else
                                king.PotentialMoves[i] = 10*x + y;
                        }
                        else {
                                one_y *= -1;
                                x = king.PosX;
                                y = king.PosY + one_y;
                                if(king.color == board[x][y].color)
                                king.PotentialMoves[i] = -1;
                                else
                                king.PotentialMoves[i] = 10*x + y;
                        }
                }

                if((i%2) == 0) {
                        one_x *= -1;
                }
                else {
                        one_y *= -1;
                }
                x = king.x + one_x;
                y = king.y + one_y;
                if(king.color == board[x][y].color)
                king.PotentialMoves[i] = -1;
                else
                king.PotentialMoves[i] = 10*x + y;
        }

	for(int n ; n < 8; n ++) {
        	if(king.PotentialMoves[m] >= 0)
        	for(int x = 0; x < 8; x++) {
                	for(int y = 0; y < 8; y++) {
                        	if(board[x][y].color != king.color && (board[x][y].alive == 0)) {
                                	for(int i = 0; i < 30 ; i++) {

                                        	if(board[x][y].PotentialMoves[i] == king.PotentialMoves[m] && board[x][y].Value != 1)
                                        	king.PotentialMoves[m] = -1;

                                      		if(board[x][y].value == 1){
                                                	int x_p = x;
                                                	int y_p = y;
                                                	if(board[x][y].color == black) {
                                                        	x_p--:
                                                        	y_p--;
                                                	}
                                                	else {
                                                        	x_p++;
                                                        	y_p++;
                                                	}
                                                	if( (10 * x_p + y_p) == king.PotentialMoves[m])
                                                	king.PotentialMoves[m];
                                        	}
                                	}
                        	}	
         	       }	
        	}	
	}
}

